import {Point} from '../utils/positions'

type MapValue = "#" | "."

const ASTEROIDS: Point[] = []
const MAP: MapValue[][] = 
`.#..#..#..#...#..#...###....##.#....
.#.........#.#....#...........####.#
#..##.##.#....#...#.#....#..........
......###..#.#...............#.....#
......#......#....#..##....##.......
....................#..............#
..#....##...#.....#..#..........#..#
..#.#.....#..#..#..#.#....#.###.##.#
.........##.#..#.......#.........#..
.##..#..##....#.#...#.#.####.....#..
.##....#.#....#.......#......##....#
..#...#.#...##......#####..#......#.
##..#...#.....#...###..#..........#.
......##..#.##..#.....#.......##..#.
#..##..#..#.....#.#.####........#.#.
#......#..........###...#..#....##..
.......#...#....#.##.#..##......#...
.............##.......#.#.#..#...##.
..#..##...#...............#..#......
##....#...#.#....#..#.....##..##....
.#...##...........#..#..............
.............#....###...#.##....#.#.
#..#.#..#...#....#.....#............
....#.###....##....##...............
....#..........#..#..#.......#.#....
#..#....##.....#............#..#....
...##.............#...#.....#..###..
...#.......#........###.##..#..##.##
.#.##.#...##..#.#........#.....#....
#......#....#......#....###.#.....#.
......#.##......#...#.#.##.##...#...
..#...#.#........#....#...........#.
......#.##..#..#.....#......##..#...
..##.........#......#..##.#.#.......
.#....#..#....###..#....##..........
..............#....##...#.####...##.`.split('\n').map((row) => row.split('')) as any

const X = MAP[0].length
const Y = MAP.length

const position = (x: number, y: number) => {
  return MAP[y][x]
}

const asteroid = (x: number, y: number) => {
  return position(x, y) === "#"
}

const inVision = (point: Point): number => {
  const results: {[angle: number]: Point[]} = {}

  ASTEROIDS.forEach((asteroid) => {
    if(!asteroid.equal(point)){
      const tR = point.angleTo(asteroid)

      if(!results[tR]){
        results[tR] = []
      }

      results[tR].push(asteroid)
    }
  })

  return Object.keys(results).length
}

let x = 0
let y = 0
while(x < X){
  while(y < Y){
    if(asteroid(x,y)){
      ASTEROIDS.push(new Point(x, y))
    }

    y++
  }

  y = 0
  x++
}

const best = ASTEROIDS.reduce((best, point) => {
  const count = inVision(point)

  if(count > best.count){
    return {count, point}
  }

  return best
}, {count: 0, point: new Point(0,0)})

console.dir(best)